using ExploitableApp.Data.DataAccess;
using ExploitableApp.Data.Managers;
using Microsoft.AspNetCore.SignalR.Client;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Renci.SshNet;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace ExploitableApp.WebService.Services
{
    public class PwndService : IHostedService
    {
        private bool _shouldStop = false;
        private readonly IServiceScopeFactory _scopeFactory;
        private readonly IConfiguration _configuration;
        private readonly List<HubConnection> _connections = new List<HubConnection>();
        private Task task;
        public PwndService(IConfiguration configuration, IServiceScopeFactory scopeFactory)
        {
            _scopeFactory = scopeFactory;
            _configuration = configuration;
            if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("WEBSERVER_SERVICE_ENDPOINT")))
            {
                var url = Environment.GetEnvironmentVariable("WEBSERVER_SERVICE_ENDPOINT").TrimEnd('/').TrimEnd('\\') + "/pwnhub";
                var hc = new HubConnectionBuilder()
                    .WithUrl(url)
                    .ConfigureLogging(x => { x.AddConsole().AddDebug(); })
                    .Build();

                hc.StartAsync();
                _connections.Add(hc);
            }
        }

        public Task StartAsync(CancellationToken cancellationToken)
        {
            _shouldStop = false;
            task = new Task(() =>
            {
                while (!_shouldStop)
                {
                    Thread.Sleep(10000);
                    Console.WriteLine("PwndService Running");
                    new List<string> { "exploitableapp", "exploitableapp-ws", "db", "redis" }.ForEach(x =>
                    {
                        using (var client = new SshClient(x, "root", "Password1"))
                        {
                            Console.WriteLine($"PwndService Connecting to {x}");
                            try
                            {
                                client.Connect();
                                var cmd = client.RunCommand("cat /root/.flag");
                                var result = cmd.Result.Trim();
                                client.Disconnect();
                                _connections.ForEach(hc =>
                                {
                                    hc.InvokeAsync("SendPwnNotification",
                                        new
                                        {
                                            server = x,
                                            status = "accessible",
                                            info = result
                                        });
                                });
                                Console.WriteLine($"PwndService Connected to {x}");
                            }
                            catch (Exception ex)
                            {
                                _connections.ForEach(hc =>
                                {
                                    hc.InvokeAsync("SendPwnNotification",
                                        new
                                        {
                                            server = x,
                                            status = "inaccessible",
                                            info = ex.ToString()
                                        });
                                });
                                Console.WriteLine($"PwndService Failed to Connected to {x}");
                            }
                        }
                    });
                }
            }, cancellationToken);
            task.Start();
            return Task.CompletedTask;
        }

        public Task StopAsync(CancellationToken cancellationToken)
        {
            _shouldStop = true;
            return Task.CompletedTask;
        }
    }
}
