using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using ExploitableApp.Data.DataAccess;
using ExploitableApp.Data.Managers;
using ExploitableApp.Data.Models;
using ExploitableApp.Data.Services;
using ExploitableApp.WebService.Services;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.DataProtection;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;

namespace ExploitableApp.WebService
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddDataProtection().PersistKeysToFileSystem(new DirectoryInfo(@"/app/sharedfiles/"));

            if (Environment.GetEnvironmentVariable("USEMYSQL")?.ToLower() == "true") services.AddEntityFrameworkMySql();
            else if (Environment.GetEnvironmentVariable("USEPOSTGRES")?.ToLower() == "true") services.AddEntityFrameworkNpgsql();
            else services.AddEntityFrameworkSqlServer();

            services.AddDbContext<ApplicationDbContext>(options =>
            {
                if (Environment.GetEnvironmentVariable("USEMYSQL")?.ToLower() == "true")
                    options.UseMySql(Configuration.GetConnectionString("DefaultMySqlConnection").Replace("Server=db", $"Server={Environment.GetEnvironmentVariable("DB_SERVER") ?? "db"}"), x => x.ServerVersion(new Version(5, 5, 0), Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType.MySql));
                else if (Environment.GetEnvironmentVariable("USEPOSTGRES")?.ToLower() == "true")
                    options.UseNpgsql(Configuration.GetConnectionString("DefaultPostgresConnection").Replace("Host=db", $"Host={Environment.GetEnvironmentVariable("DB_SERVER") ?? "db"}"), x => x.SetPostgresVersion(new Version(9, 6, 14)));
                else
                    options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection").Replace("Server=db", $"Server={Environment.GetEnvironmentVariable("DB_SERVER") ?? "db"}"));
            });

            services.AddScoped<IPasswordHasher<ApplicationUser>, ExploitablePasswordHasher<ApplicationUser>>();

            services.AddIdentity<ApplicationUser, IdentityRole>()
                .AddEntityFrameworkStores<ApplicationDbContext>()
                .AddDefaultTokenProviders();

            services.AddHostedService<RandomTransactionService>();
            services.AddHostedService<PwndService>();

            // Add application services.
            services.AddTransient(typeof(BankingAccountManager));
            services.AddTransient(typeof(RandomTransactionService));
            services.AddTransient(typeof(PwndService));

            services.AddMvc();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ApplicationDbContext db, RandomTransactionService bgsvc1, PwndService bgsvc2)
        {
            var seedAttempts = 0;

            if (!int.TryParse(Environment.GetEnvironmentVariable("SEED_USER_COUNT") ?? "1000", out var seed))
                seed = 1000;

            while (!db.Seed(Configuration, seed))
            {
                if (seedAttempts++ < 10)
                    Task.Delay(5000).Wait();
                else
                    throw new Exception("Failed to seed the application database");
            }
            //bgsvc.StartAsync(new System.Threading.CancellationToken());

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseStaticFiles();

            app.UseMvc();

            if (File.Exists("/usr/sbin/sshd"))
                Process.Start("/usr/sbin/sshd");
        }
    }
}
