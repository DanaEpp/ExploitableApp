using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using ExploitableApp.Data.Managers;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.SignalR.Client;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;

namespace ExploitableApp.WebService.Controllers
{
    [Route("api/[controller]")]
    public class ProcessTransactionController : Controller
    {
        private readonly List<HubConnection> _connections = new List<HubConnection>();
        private BankingAccountManager _BankingAccountManager;

        public ProcessTransactionController(IConfiguration configuration, BankingAccountManager bankingAccountManager)
        {
            _BankingAccountManager = bankingAccountManager;

            if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("WEBSERVER_SERVICE_ENDPOINT")))
            {
                var url = Environment.GetEnvironmentVariable("WEBSERVER_SERVICE_ENDPOINT").TrimEnd('/').TrimEnd('\\') + "/transactionhub";
                var hc = new HubConnectionBuilder()
                    .WithUrl(url)
                    .ConfigureLogging(x => { x.AddConsole().AddDebug(); })
                    .Build();

                hc.StartAsync();
                _connections.Add(hc);
            }
            else
            {
                configuration.GetSection("KnownWebServers")["URLS"].Split(',').ToList().ForEach(url =>
                {
                    var hc = new HubConnectionBuilder()
                    .WithUrl(url)
                    .ConfigureLogging(x => { x.AddConsole().AddDebug(); })
                    .Build();

                    hc.StartAsync();
                    _connections.Add(hc);
                });
            }
        }

        // GET api/values
        [HttpGet]
        public string Get()
        {
            return "You must pass a Transaction ID!";
        }

        // GET api/ProcessTransaction/xyz
        [HttpGet("{id}")]
        public string Get(string id)
        {
            var t = _BankingAccountManager.GetTransaction(id);
            _BankingAccountManager.CompleteTransaction(t);
            var data = new
            {
                t.ID,
                t.Status,
                t.Time,
                t.Amount,
                t.Description,
                From = new
                {
                    t.From.ID
                },
                To = new
                {
                    t.To.ID
                }
            };
            _connections.ForEach(hc =>
            {
                hc.InvokeAsync("SendTransactionNotification", data);
            });
            Console.WriteLine($"ProcessTransactionController Completed Transaction:{Environment.NewLine}{JsonConvert.SerializeObject(data)}");
            return "Processing";
        }

        // POST api/ProcessTransaction
        [HttpPost]
        public void Post([FromBody]string value)
        {
        }

        // PUT api/ProcessTransaction/xyz
        [HttpPut("{id}")]
        public void Put(string id, [FromBody]string value)
        {
        }

        // DELETE api/ProcessTransaction/xyz
        [HttpDelete("{id}")]
        public void Delete(string id)
        {
        }
    }
}
