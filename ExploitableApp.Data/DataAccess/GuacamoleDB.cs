using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Threading.Tasks;
using Dapper;
using Dapper.Contrib.Extensions;
using System.Linq;
using Npgsql;
using System.Security.Cryptography;
using System.Text;

namespace ExploitableApp.Data.DataAccess
{
    public static class GuacamoleDB
    {
        public static bool Debug { get { return Environment.GetEnvironmentVariable("DEBUG")?.ToLower() == "true"; } }
        private async static Task<NpgsqlConnection> GetConnection()
        {
            var cstr = $"Host={Environment.GetEnvironmentVariable("POSTGRES_HOSTNAME")};Database={Environment.GetEnvironmentVariable("POSTGRES_DATABASE")};Username={Environment.GetEnvironmentVariable("POSTGRES_USER")};Password={Environment.GetEnvironmentVariable("POSTGRES_PASSWORD")};";
            if (Debug) Console.WriteLine($"ConnectionString: {cstr}");
            var c = new NpgsqlConnection(cstr);
            await c.OpenAsync();
            if (Debug) Console.WriteLine($"Connection Opened: {cstr}");
            return c;
        }
        public async static Task<bool> TestConnection()
        {
            try
            {
                using (var c = await GetConnection())
                {
                    var results = await c.QueryAsync<guacamole_entity>("select * from guacamole_entity order by entity_id asc limit 1");
                    return true;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
                return false;
            }
        }

        public async static Task<IEnumerable<guacamole_entity>> GetGuacamoleEntities()
        {
            using (var c = await GetConnection())
            {
                return await c.QueryAsync<guacamole_entity>("select * from guacamole_entity order by entity_id asc");
            }
        }

        public async static Task<guacamole_entity> GetGuacamoleEntityByName(string name)
        {
            using (var c = await GetConnection())
            {
                return (await c.QueryAsync<guacamole_entity>("select * from guacamole_entity where name=@name order by entity_id asc", new { name })).FirstOrDefault();
            }
        }

        public async static Task<guacamole_entity> GetGuacamoleEntityByEntityID(int entity_id)
        {
            using (var c = await GetConnection())
            {
                return (await c.QueryAsync<guacamole_entity>("select * from guacamole_entity where entity_id=@entity_id order by entity_id asc", new { entity_id })).FirstOrDefault();
            }
        }

        public async static Task<guacamole_connection> GetGuacamoleConnectionByName(string name)
        {
            using (var c = await GetConnection())
            {
                return (await c.QueryAsync<guacamole_connection>("select * from guacamole_connection where connection_name=@name order by connection_id asc", new { name })).FirstOrDefault();
            }
        }

        public async static Task<guacamole_connection> GetGuacamoleConnectionByConnectionID(int connection_id)
        {
            using (var c = await GetConnection())
            {
                return (await c.QueryAsync<guacamole_connection>("select * from guacamole_connection where connection_id=@connection_id order by connection_id asc", new { connection_id })).FirstOrDefault();
            }
        }

        public async static Task<IEnumerable<guacamole_connection>> GetGuacamoleConnectionsByEntityID(int entity_id)
        {
            using (var c = await GetConnection())
            {
                return await c.QueryAsync<guacamole_connection>("select distinct c.* from guacamole_connection c inner join guacamole_connection_permission p on c.connection_id = p.connection_id where p.entity_id=@entity_id", new { entity_id });
            }
        }
        public async static Task CreateUserEntry(string username)
        {
            username = username.Split('@')[0];
            using (var c = await GetConnection())
            {
                using (var transaction = c.BeginTransaction())
                {
                    try
                    {

                        var sql = @"INSERT INTO guacamole_entity (name, type) VALUES ('guacadmin', 'USER');
                                INSERT INTO guacamole_user (entity_id, password_hash, password_salt, password_date)
                                SELECT
                                    entity_id,
                                    decode('PASSWORD_HEX', 'hex'),
                                    NULL,
                                    CURRENT_TIMESTAMP
                                FROM guacamole_entity WHERE name = 'guacadmin' AND guacamole_entity.type = 'USER';

                                INSERT INTO guacamole_system_permission (entity_id, permission)
                                SELECT entity_id, permission::guacamole_system_permission_type
                                FROM (
                                    VALUES
                                        ('guacadmin', 'CREATE_CONNECTION'),
                                        ('guacadmin', 'CREATE_CONNECTION_GROUP'),
                                        ('guacadmin', 'CREATE_SHARING_PROFILE'),
                                        ('guacadmin', 'CREATE_USER'),
                                        ('guacadmin', 'CREATE_USER_GROUP'),
                                        ('guacadmin', 'ADMINISTER')
                                ) permissions (username, permission)
                                JOIN guacamole_entity ON permissions.username = guacamole_entity.name AND guacamole_entity.type = 'USER' AND guacamole_entity.name = 'guacadmin';

                                INSERT INTO guacamole_user_permission (entity_id, affected_user_id, permission)
                                SELECT guacamole_entity.entity_id, guacamole_user.user_id, permission::guacamole_object_permission_type
                                FROM (
                                    VALUES
                                        ('guacadmin', 'guacadmin', 'READ'),
                                        ('guacadmin', 'guacadmin', 'UPDATE'),
                                        ('guacadmin', 'guacadmin', 'ADMINISTER')
                                ) permissions (username, affected_username, permission)
                                JOIN guacamole_entity          ON permissions.username = guacamole_entity.name AND guacamole_entity.type = 'USER' AND guacamole_entity.name = 'guacadmin'
                                JOIN guacamole_entity affected ON permissions.affected_username = affected.name AND guacamole_entity.type = 'USER' AND guacamole_entity.name = 'guacadmin'
                                JOIN guacamole_user            ON guacamole_user.entity_id = affected.entity_id;"
                                .Replace("guacadmin", username)
                                .Replace("PASSWORD_HEX", BitConverter.ToString(new SHA256Managed().ComputeHash(Encoding.UTF8.GetBytes(username))).Replace("-", ""));

                        await c.ExecuteAsync(sql);

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.ToString());
                        transaction.Rollback();
                    }
                }
            }
        }
        public async static Task CreateNewSshConnectionForEntities(int[] entity_ids, string connection_name, string hostname)
        {
            using (var c = await GetConnection())
            {
                using (var transaction = c.BeginTransaction())
                {
                    try
                    {
                        var connection_id = await c.InsertAsync(new guacamole_connection()
                        {
                            connection_name = connection_name,
                            protocol = "ssh",
                            failover_only = false
                        }, transaction);

                        await c.InsertAsync(new guacamole_connection_parameter()
                        {
                            connection_id = connection_id,
                            parameter_name = "hostname",
                            parameter_value = hostname
                        }, transaction);

                        foreach (var entity_id in entity_ids)
                        {
                            await c.InsertAsync(new guacamole_connection_permission()
                            {
                                entity_id = entity_id,
                                connection_id = connection_id,
                                permission = "READ"
                            }, transaction);
                        }

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.ToString());
                        transaction.Rollback();
                    }
                }
            }
        }

        public async static Task SyncSshConnectionsForEntities(int[] entity_ids, int connection_id)
        {
            using (var c = await GetConnection())
            {
                using (var transaction = c.BeginTransaction())
                {
                    try
                    {
                        await c.ExecuteAsync("delete from guacamole_connection_permission where connection_id=@connection_id", new { connection_id }, transaction);
                        foreach (var entity_id in entity_ids)
                        {
                            await c.InsertAsync(new guacamole_connection_permission()
                            {
                                entity_id = entity_id,
                                connection_id = connection_id,
                                permission = "READ"
                            }, transaction);
                        }

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.ToString());
                        transaction.Rollback();
                    }
                }
            }
        }
        public async static Task<bool> IsMemberofGroup(int member_entity_id, int user_group_id)
        {
            using (var c = await GetConnection())
            {
                return null != (await c.QueryAsync<guacamole_user_group_member>("select * from guacamole_user_group_member where member_entity_id=@member_entity_id and user_group_id=@user_group_id", new { member_entity_id, user_group_id })).FirstOrDefault();
            }
        }

        public async static Task AddToGroup(int member_entity_id, int user_group_id)
        {
            using (var c = await GetConnection())
            {
                using (var transaction = c.BeginTransaction())
                {
                    try
                    {
                        await c.InsertAsync(new guacamole_user_group_member()
                        {
                            member_entity_id = member_entity_id,
                            user_group_id = user_group_id
                        }, transaction);

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.ToString());
                        transaction.Rollback();
                    }
                }
            }
        }
    }

    [Table("guacamole_entity")]
    public class guacamole_entity
    {
        [Key]
        [Computed]
        public int entity_id { get; set; }
        public string name { get; set; }
        public string type { get; set; }
    }

    [Table("guacamole_user")]
    public class guacamole_user
    {
        [Key]
        [Computed]
        public int user_id { get; set; }
        public int entity_id { get; set; }
        public byte[] password_hash { get; set; }
        public byte[] password_salt { get; set; }
        public DateTime? password_date { get; set; }
        public bool? disabled { get; set; }
        public bool? expired { get; set; }
        public TimeSpan? access_window_start { get; set; }
        public TimeSpan? access_window_end { get; set; }
        public DateTime? valid_from { get; set; }
        public DateTime? valid_until { get; set; }
        public string timezone { get; set; }
        public string full_name { get; set; }
        public string email_address { get; set; }
        public string organization { get; set; }
        public string organizational_role { get; set; }
    }

    [Table("guacamole_connection")]
    public class guacamole_connection
    {
        [Key]
        [Computed]
        public int connection_id { get; set; }
        public string connection_name { get; set; }
        public int? parent_id { get; set; }
        public string protocol { get; set; }
        public int? max_connections { get; set; }
        public int? max_connections_per_user { get; set; }
        public int? connection_weight { get; set; }
        public bool? failover_only { get; set; }
        public int? proxy_port { get; set; }
        public string proxy_hostname { get; set; }
        public string proxy_encryption_method { get; set; }
    }

    [Table("guacamole_connection_parameter")]
    public class guacamole_connection_parameter
    {
        public int connection_id { get; set; }
        public string parameter_name { get; set; }
        public string parameter_value { get; set; }
    }

    [Table("guacamole_connection_permission")]
    public class guacamole_connection_permission
    {
        public int entity_id { get; set; }
        public int connection_id { get; set; }
        public string permission { get; set; }
    }

    [Table("guacamole_user_group_member")]
    public class guacamole_user_group_member
    {
        public int member_entity_id { get; set; }
        public int user_group_id { get; set; }
    }
}
