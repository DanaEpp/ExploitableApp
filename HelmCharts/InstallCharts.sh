#!/bin/bash

function remove_charts
{
    #kubectl delete -f https://github.com/jetstack/cert-manager/releases/download/v0.8.1/cert-manager.yaml
	#kubectl delete -f cluster-issuer.yaml --namespace exploitable
	helm del --purge exploitable-ingress
	helm del --purge db
	helm del --purge redis
	helm del --purge exploitableapp-ws
	helm del --purge exploitableapp
	helm del --purge elastic
	helm del --purge elastic-patch
	helm del --purge guac

	kubectl delete all --all --namespace exploitable
	kubectl delete secrets --all --namespace exploitable

	#helm del --purge gitlab
	#kubectl delete all -l release=elastic --namespace logs
	#kubectl delete pvc -l release=elastic --namespace logs
	#kubectl delete secrets -l release=elastic --namespace logs
	#kubectl delete all -l release=gitlab --namespace gitlab
	#kubectl delete pvc -l release=gitlab --namespace gitlab
	#kubectl delete secrets -l release=gitlab --namespace gitlab
	while true; do if echo "$(kubectl get pods --all-namespaces | grep 'Terminating')" | grep -q "Terminating"; then echo "Waiting on pods to Terminate (10s)"; sleep 10s; else break; fi; done
}

####################################################
#Check Params
####################################################
if [ "$#" -ne 1 ]; then
	#domain='attlocal.net'
	echo "You must provide a domain:"
	echo "EXAMPLE 1: attlocal.net"
	echo "EXAMPLE 2: local"
	echo "EXAMPLE 3: exploitable.app"
	exit
else
	domain=$1
fi

####################################################
#Helm Init
####################################################
if echo "$(kubectl get po --all-namespaces | grep tiller)" | grep -q tiller; then 
	echo "Tiller is Running"
else
	echo "Installing Tiller"
	kubectl apply -f https://gist.githubusercontent.com/postworthy/83b8dd925d7d79923af7d829b5985f16/raw/e55251c24ae92fd87356da66371600f6353e949d/tiller-rbac-config.yaml
    helm init --service-account tiller
	while true; do if echo "$(kubectl get pods -n kube-system | grep tiller | grep Running)" | grep -q "Running"; then break; else echo "Waiting on tiller (10s)"; sleep 10s; fi; done
fi;

####################################################
#Remove Old Charts
####################################################
remove_charts

####################################################
#Add Charts
####################################################

#Create Namespaces
kubectl create namespace cert-manager
kubectl create namespace exploitable

#Cert Manager
kubectl label namespace cert-manager certmanager.k8s.io/disable-validation="true"
kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.8.1/cert-manager.yaml
while true; do if echo "$(kubectl get pods --all-namespaces | grep '0/1\|0/2')" | grep -q "0/1\|0/2"; then echo "Waiting on pods (10s)"; sleep 10s; else break; fi; done
kubectl get pods --all-namespaces
kubectl apply -f cluster-issuer.yaml --namespace exploitable


#Guacamole
helm install --namespace exploitable --name guac ./charts/guacamole/ --set hostName=$(echo "$domain")

#Exploitable App
helm install stable/nginx-ingress --namespace exploitable --name exploitable-ingress --set rbac.create=true
helm install --namespace exploitable --name db ./charts/db/
helm install --namespace exploitable --name redis ./charts/redis/
helm install --namespace exploitable --name exploitableapp-ws ./charts/exploitableappwebservice/
helm install --namespace exploitable --name exploitableapp ./charts/exploitableapp/ --set ingress.hosts={$(echo "$domain")}

#Elastic Stack
#helm install --name elastic --namespace logs stable/elastic-stack \
#  --set fluent-bit.enabled=true \
#  --set fluent-bit.backend.forward.port=24220 \
#  --set fluent-bit.backend.forward.host=elastic-fluentd \
#  --set fluent-bit.backend.es.host=elastic-elasticsearch-client \
#  --set fluentd.enabled=true \
#  --set fluentd-elasticsearch.enabled=true \
#  --set fluentd-elasticsearch.elasticsearch.host='elastic-elasticsearch-client'
#kubectl patch configmap/elastic-kibana --namespace logs --type merge -p '"data": { "kibana.yml": "elasticsearch.url: http://elastic-elasticsearch-client:9200\nserver.host: \"0\"\nserver.name: elastic-kibana\n" }'
#helm install --name elastic-patch --namespace logs ./charts/elastic/

#Gitlab
#helm repo add gitlab https://charts.gitlab.io/
#helm repo update
#helm upgrade --install gitlab gitlab/gitlab --namespace gitlab --timeout 600 \
#  --set global.edition=ce \
#  --set global.hosts.domain=$domain \
#  --set certmanager-issuer.email=me@exploitable.app
#kubectl get secret gitlab-gitlab-initial-root-password -ojsonpath='{.data.password}' --namespace gitlab | base64 --decode ; echo

####################################################
#Wait on Input
####################################################
echo "Press 'Enter' to Continue"
read

####################################################
#Watch Pods
####################################################
watch kubectl get all --namespace exploitable

####################################################
#Remove Charts
####################################################
remove_charts


####################################################
#AKS Setup
####################################################
#az group create --name Temporary -l eastus
#az aks create --resource-group Temporary --name tempCluster --node-count 1 --node-vm-size Standard_B2s --kubernetes-version 1.13.5 --enable-addons http_application_routing --generate-ssh-keys
#az aks get-credentials --resource-group Temporary --name tempCluster
#./InstallCharts.sh