apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: {{ .Release.Namespace }}
  labels:
    io.kompose.service: {{ printf "%s-%s" .Release.Name  "guacamole" }}
  name: {{ printf "%s-%s" .Release.Name  "guacamole" }}
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      labels:
        io.kompose.service: {{ printf "%s-%s" .Release.Name  "guacamole" }}
    spec:
      volumes:
      - name: sharedscripts
        emptyDir: {}
      initContainers:
      - name: schemagen
        image: guacamole/guacamole
        volumeMounts:
        - name: sharedscripts
          mountPath: /tmp
        command:
        - /bin/bash
        - -c
        - '/opt/guacamole/bin/initdb.sh --postgres > /tmp/initdb.sql'
      - name: check-db-ready
        image: postgres
        command: 
        - sh
        - -c 
        - 'until pg_isready -h {{ printf "%s-%s" .Release.Name  "postgres" }} -p 5432; do echo waiting for database; sleep 2; done;'
      - name: execute
        image: postgres
        volumeMounts:
        - name: sharedscripts
          mountPath: /tmp
        command:
        - /bin/bash
        - -c
        - 'PGPASSWORD={{ .Values.postgresPwd }} psql -U {{ .Values.postgresUser }} -d {{ .Values.postgresDb }} -h {{ printf "%s-%s" .Release.Name  "postgres" }} -f /tmp/initdb.sql'
      containers:
      - env:
        - name: "GUACD_PORT"
          value: "4822"
        - name: "GUACD_HOSTNAME"
          value: "{{ printf "%s-%s" .Release.Name  "guacd" }}"
        - name: "POSTGRES_HOSTNAME"
          value: "{{ printf "%s-%s" .Release.Name  "postgres" }}"
        - name: "POSTGRES_PORT"
          value: "5432"
        - name: "POSTGRES_DATABASE"
          value: "{{ .Values.postgresDb }}"
        - name: "POSTGRES_PASSWORD"
          value: "{{ .Values.postgresPwd }}"
        - name: "POSTGRES_USER"
          value: "{{ .Values.postgresUser }}"
        image: {{ .Values.guacamoleImage }}
        name: {{ printf "%s-%s" .Release.Name  "guacamole" }}
        volumeMounts:
        - name: sharedscripts
          mountPath: /initdb
        ports:
        - containerPort: 8080
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  namespace: {{ .Release.Namespace }}
  labels:
    io.kompose.service: {{ printf "%s-%s" .Release.Name  "guacamole" }}
  name: {{ printf "%s-%s" .Release.Name  "guacamole" }}
spec:
  ports:
  - name: "8080"
    port: 8080
    targetPort: 8080
  selector:
    io.kompose.service: {{ printf "%s-%s" .Release.Name  "guacamole" }}
status:
  loadBalancer: {}