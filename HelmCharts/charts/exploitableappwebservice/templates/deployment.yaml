apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "exploitableappwebservice.fullname" . }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ template "exploitableappwebservice.name" . }}
    chart: {{ template "exploitableappwebservice.chart" . }}
    draft: {{ default "draft-app" .Values.draft }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "exploitableappwebservice.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "exploitableappwebservice.name" . }}
        draft: {{ default "draft-app" .Values.draft }}
        release: {{ .Release.Name }}
    spec:
      volumes:
      - name: sharedfiles
        emptyDir: {}
      initContainers:
      - name: check-db-ready
        image: postgres:9.6.14-alpine
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: 
        - sh
        - -c 
        - 'until pg_isready -h {{ .Values.postgresHostName }} -p 5432; do echo waiting for database; sleep 2; done;'
      - name: check-db-ready-2
        image: busybox
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: 
        - sh
        - -c 
        - 'sleep 30;'
      containers:
        - name: {{ template "exploitableappwebservice.name" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: sharedfiles
              mountPath: /app/sharedfiles/
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: ssh
              containerPort: 22
              protocol: TCP
          {{- if .Values.probes.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          {{- end }}
          env:
            - name: ASPNETCORE_ENVIRONMENT
              value: "Development"
            - name: ASPNETCORE_URLS
              value: "http://+:8080"
            - name: DEBUG
              value: "true"
            - name: DB_SERVER
              value: "{{ .Values.dbServer }}"
            - name: WEBSERVER_SERVICE_ENDPOINT
              value: "http://{{ .Values.webServer }}:8080"
            - name: WEBSERVICE_ENDPOINT
              value: "http://{{ .Values.webServiceServer }}:8080"
            - name: REDIS_SERVER
              value: "{{ .Values.redisServer }}"
            - name: SEED_USER_COUNT
              value: "{{ .Values.userSeedCount }}"
            - name: USEMYSQL
              value: "false"
            - name: USEPOSTGRES
              value: "true"
            - name: "POSTGRES_HOSTNAME"
              value: "{{ .Values.postgresHostName }}"
            - name: "POSTGRES_DATABASE"
              value: "{{ .Values.postgresDb }}"
            - name: "POSTGRES_PASSWORD"
              value: "{{ .Values.postgresPwd }}"
            - name: "POSTGRES_USER"
              value: "{{ .Values.postgresUser }}"
            {{- $root := . }}
            {{- range $ref, $values := .Values.secrets }}
            {{- range $key, $value := $values }}
            - name: {{ $ref }}_{{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ template "exploitableappwebservice.fullname" $root }}-{{ $ref | lower }}
                  key: {{ $key }}
            {{- end }}
            {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
