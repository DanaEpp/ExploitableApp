using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using ExploitableApp.Models;
using Microsoft.AspNetCore.Identity;
using ExploitableApp.Controllers;
using System.IO;
using ExploitableApp.Services;
using ExploitableApp.Data;
using Microsoft.Extensions.Configuration;

namespace ExploitableApp.Managers
{
    public class BankingAccountManager
    {
        public IConfiguration Configuration
        {
            get;
            private set;
        }
        public BankingAccountManager(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        private ApplicationDbContext GetContext()
        {
            //Configuration.GetConnectionString("DefaultConnection")
            var options = new DbContextOptionsBuilder<ApplicationDbContext>()
                .UseSqlServer(Configuration.GetConnectionString("DefaultConnection"))
                .EnableSensitiveDataLogging();
            return new ApplicationDbContext(options.Options);        
        }

        public BankingAccount CreateAccount(ApplicationUser user, float startingBalance = 0)
        {
            using (var context = GetContext())
            {
                var owner = context.Users.Find(user.Id);
                if (owner.Id != user.Id) throw new Exception("User Not Found while Creating Account!");
                var account = new BankingAccount
                {
                    AccountOwner = owner,
                    Balance = startingBalance
                };
                context.BankingAccounts.Add(account);
                context.SaveChanges();
                return account;
            }
        }

        public List<BankingAccount> GetAccounts(ApplicationUser user)
        {
            using (var context = GetContext())
            {
                return context.BankingAccounts
                              .Where(x => x.AccountOwner.Id == user.Id)
                              .AsNoTracking()
                              .ToList();
            }
        }

        public IQueryable<Transaction> GetTransactions(BankingAccount account)
        {
            var context = GetContext();
            return context.Transactions
                          .Where(x => x.To.ID == account.ID || x.From.ID == account.ID)
                          .AsNoTracking();
        }

        public List<Transaction> GetAccountTransactions(BankingAccount account, int skip = 0, int take = 25)
        {
            using (var context = GetContext())
            {
                return context.Transactions
                              .Where(x => x.To.ID == account.ID || x.From.ID == account.ID)
                              .Skip(skip)
                              .Take(take)
                              .AsNoTracking()
                              .ToList();
            }
        }

        public Transaction CreateTransaction(BankingAccount fromAccount, BankingAccount toAccount, float amount, string description, DateTime time)
        {
            using (var context = GetContext())
            {
                var from = context.BankingAccounts.Find(fromAccount.ID);
                var to = context.BankingAccounts.Find(toAccount.ID);
                if (from.ID != fromAccount.ID || to.ID != toAccount.ID) throw new Exception("User Not Found while Creating Transaction!");
                var t = new Transaction
                {
                    Amount = amount,
                    Description = description,
                    From = from,
                    To = to,
                    Status = "Pending",
                    Time = time
                };
                context.Transactions.Add(t);
                context.SaveChanges();
                return t;
            }
        }

        public Transaction CompleteTransaction(Transaction transaction)
        {
            using (var context = GetContext())
            using (var scope = context.Database.BeginTransaction())
            {
                try
                {
                    var t = context.Transactions.Find(transaction.ID);
                    var from = context.BankingAccounts.Find(transaction.From.ID);
                    var to = context.BankingAccounts.Find(transaction.To.ID);
                    if (t.ID != transaction.ID || from.ID != transaction.From.ID || to.ID != transaction.To.ID) throw new Exception("Value Not Found while Creating Transaction!");
                    t.Status = "Completed";
                    from.Balance -= t.Amount;
                    to.Balance += t.Amount;
                    context.SaveChanges();
                    scope.Commit();
                    return t;
                }
                catch
                {
                    scope.Rollback();
                    throw;
                }
            }
        }
    }
}
