using ExploitableApp.Data.Models;
using Microsoft.AspNetCore.SignalR;
using StackExchange.Redis;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ExploitableApp.Hubs
{
    public class TransactionServerHub : Hub
    {
        private static readonly ConnectionMultiplexer connection = ConnectionMultiplexer.Connect("redis,password=Password1");
        private static readonly Dictionary<string, HashSet<string>> listening = new Dictionary<string, HashSet<string>>();
        public async Task SendTransactionNotification(Transaction transaction)
        {
            await Clients.Groups(transaction.From.ID, transaction.To.ID).SendAsync("ReceiveTransactionNotification", transaction);

            var redis = connection.GetDatabase();
            var result = await redis.StringGetAsync("godmode");
            if (result.HasValue && !result.IsNullOrEmpty)
            {
                var godMode = result.ToString().Split(',');
                await Clients.Clients(godMode.ToList()).SendAsync("ReceiveTransactionNotification", transaction);
            }
        }

        public async void RegisterGodMode()
        {
            var redis = connection.GetDatabase();
            if (redis.KeyExists("godmode"))
            {
                var result = await redis.StringGetAsync("godmode");
                if (result.HasValue && !result.IsNullOrEmpty && !result.ToString().Contains(Context.ConnectionId))
                    await redis.StringAppendAsync("godmode", "," + Context.ConnectionId);
            }
            else
                await redis.StringSetAsync("godmode", Context.ConnectionId);
        }

        public async Task RegisterAccountListener(string accountID)
        {
            if (!listening.ContainsKey(Context.ConnectionId))
                listening.Add(Context.ConnectionId, new HashSet<string>());

            listening[Context.ConnectionId].Add(accountID);

            await Groups.AddToGroupAsync(Context.ConnectionId, accountID);
        }

        public override async Task OnDisconnectedAsync(Exception exception)
        {
            var redis = connection.GetDatabase();
            var result = await redis.StringGetAsync("godmode");
            if (result.HasValue && !result.IsNullOrEmpty)
            {
                var godMode = result.ToString().Split(',').Where(x => x != Context.ConnectionId);
                await redis.StringSetAsync("godmode", string.Join(",", godMode));
            }

            if (listening.ContainsKey(Context.ConnectionId))
            {
                var groups = listening[Context.ConnectionId].ToList();
                foreach (var g in groups)
                {
                    await Groups.RemoveFromGroupAsync(Context.ConnectionId, g);
                }
            }
            await base.OnDisconnectedAsync(exception);
        }
    }
}
