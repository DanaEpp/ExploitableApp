using ExploitableApp.Data.Models;
using Microsoft.AspNetCore.SignalR;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ExploitableApp.Hubs
{
    public class TransactionServerHub : Hub
    {
        private static readonly Dictionary<string, HashSet<string>> listening = new Dictionary<string, HashSet<string>>();
        private static readonly HashSet<string> godMode = new HashSet<string>();
        public async Task SendTransactionNotification(Transaction transaction)
        {
            await Clients.Groups(transaction.From.ID, transaction.To.ID).SendAsync("ReceiveTransactionNotification", transaction);
            await Clients.Clients(godMode.ToList()).SendAsync("ReceiveTransactionNotification", transaction);
        }

        public void RegisterGodMode()
        {
            godMode.Add(Context.ConnectionId);
        }


        public async Task RegisterAccountListener(string accountID)
        {
            if (!listening.ContainsKey(Context.ConnectionId))
                listening.Add(Context.ConnectionId, new HashSet<string>());

            listening[Context.ConnectionId].Add(accountID);

            await Groups.AddToGroupAsync(Context.ConnectionId, accountID);
        }

        public override async Task OnDisconnectedAsync(Exception exception)
        {
            godMode.RemoveWhere(x => x == Context.ConnectionId);

            if (listening.ContainsKey(Context.ConnectionId))
            {
                var groups = listening[Context.ConnectionId].ToList();
                foreach (var g in groups)
                {
                    await Groups.RemoveFromGroupAsync(Context.ConnectionId, g);
                }
            }
            await base.OnDisconnectedAsync(exception);
        }
    }
}
