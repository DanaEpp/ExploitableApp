using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using ExploitableApp.Models;
using Microsoft.AspNetCore.Identity;
using ExploitableApp.Controllers;
using System.IO;

namespace ExploitableApp.Data
{
    public class ApplicationDbContext : IdentityDbContext<ApplicationUser>
    {

        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        {

        }

        protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);
            // Customize the ASP.NET Identity model and override the defaults if needed.
            // For example, you can rename the ASP.NET Identity table names and more.
            // Add your customizations after calling base.OnModelCreating(builder);
        }

        public void Seed()
        {
            this.Database.EnsureDeleted();
            this.Database.EnsureCreated();

            var adminRole = new Microsoft.AspNetCore.Identity.IdentityRole("Administrator") { NormalizedName = "Administrator".ToUpper(), ConcurrencyStamp = Guid.NewGuid().ToString() };
            Roles.Add(adminRole);

            var admins = new List<ApplicationUser>();

            var hasher = new PasswordHasher<ApplicationUser>();
            var appAdmin = new ApplicationUser()
            {
                UserName = "admin@exploitable.app",
                Email = "admin@exploitable.app",
                NormalizedUserName = "admin@exploitable.app".ToUpper(),
                NormalizedEmail = "admin@exploitable.app".ToUpper(),
                SecurityStamp = Guid.NewGuid().ToString(),
                ConcurrencyStamp = Guid.NewGuid().ToString(),
                LockoutEnabled = false,
            };

            Users.Add(appAdmin);

            var userData = File.ReadAllLines("Users.bak").Where(x => x.Split(',').Count() == 2);
            var users_pass = new List<(ApplicationUser, string)>();
            var r = new Random(100);
            foreach (var u in userData)
            {
                var x = u.Split(new[] { "," }, StringSplitOptions.RemoveEmptyEntries);
                var user = new ApplicationUser()
                {
                    UserName = x[0],
                    Email = x[0],
                    PhoneNumber = $"1.{r.Next().ToString()[0]}{r.Next().ToString()[0]}{r.Next().ToString()[0]}.{r.Next().ToString()[0]}{r.Next().ToString()[0]}{r.Next().ToString()[0]}.{r.Next().ToString()[0]}{r.Next().ToString()[0]}{r.Next().ToString()[0]}{r.Next().ToString()[0]}",
                    NormalizedUserName = x[0].ToUpper(),
                    NormalizedEmail = x[0].ToUpper(),
                    SecurityStamp = Guid.NewGuid().ToString(),
                    ConcurrencyStamp = Guid.NewGuid().ToString(),
                    LockoutEnabled = true,
                };
                Users.Add(user);
                users_pass.Add((user, x[1]));
                if(r.NextDouble() >= .95) admins.Add(user); //only 5% get to be admin
            }

            SaveChanges();

            UserRoles.Add(new IdentityUserRole<string>() { RoleId = adminRole.Id, UserId = appAdmin.Id });
            
            appAdmin.PasswordHash = hasher.HashPassword(appAdmin, "Password1!"); //Yeah, I know...Weak on purpose...

            foreach(var u in users_pass)
            {
                u.Item1.PasswordHash = hasher.HashPassword(u.Item1, u.Item2);
            }

            foreach (var u in admins)
            {
                UserRoles.Add(new IdentityUserRole<string>() { RoleId = adminRole.Id, UserId = u.Id });
            }

            SaveChanges();
        }
    }
}
