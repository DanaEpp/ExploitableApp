using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using ExploitableApp.Data.DataAccess;
using ExploitableApp.Data.Models;
using ExploitableApp.Services;
using ExploitableApp.Extensions;
using ExploitableApp.Constraints;
using System.IO;
using ExploitableApp.Data.Managers;
using ExploitableApp.Data.Services;
using Microsoft.AspNetCore.DataProtection;
using Microsoft.AspNetCore.SignalR;
using ExploitableApp.Hubs;
using StackExchange.Redis;
using System.Diagnostics;

namespace ExploitableApp
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            if (Environment.GetEnvironmentVariable("DISABLE_AUTOMATIC_KEY_GENERATION")?.ToLower() == "true")
                services.AddDataProtection().DisableAutomaticKeyGeneration();

            services.AddDataProtection().PersistKeysToFileSystem(new DirectoryInfo(@"/app/sharedfiles/"));

            if (Environment.GetEnvironmentVariable("USEMYSQL")?.ToLower() == "true") services.AddEntityFrameworkMySql();
            else if (Environment.GetEnvironmentVariable("USEPOSTGRES")?.ToLower() == "true") services.AddEntityFrameworkNpgsql();
            else services.AddEntityFrameworkSqlServer();

            services.AddDbContext<ApplicationDbContext>(options =>
            {
                if (Environment.GetEnvironmentVariable("USEMYSQL")?.ToLower() == "true")
                    options.UseMySql(Configuration.GetConnectionString("DefaultMySqlConnection").Replace("Server=db", $"Server={Environment.GetEnvironmentVariable("DB_SERVER") ?? "db"}"), x => x.ServerVersion(new Version(5, 5, 0), Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType.MySql));
                else if (Environment.GetEnvironmentVariable("USEPOSTGRES")?.ToLower() == "true")
                    options.UseNpgsql(Configuration.GetConnectionString("DefaultPostgresConnection").Replace("Host=db", $"Host={Environment.GetEnvironmentVariable("DB_SERVER") ?? "db"}"), x=> x.SetPostgresVersion(new Version(9, 6, 14)));
                else
                    options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection").Replace("Server=db", $"Server={Environment.GetEnvironmentVariable("DB_SERVER") ?? "db"}"));
            });

            services.AddScoped<IPasswordHasher<ApplicationUser>, ExploitablePasswordHasher<ApplicationUser>>();

            services.AddIdentity<ApplicationUser, IdentityRole>()
                .AddEntityFrameworkStores<ApplicationDbContext>()
                .AddDefaultTokenProviders();

            // Add application services.
            services.AddTransient<IEmailSender, EmailSender>();
            services.AddTransient(typeof(BankingAccountManager));
            services.AddTransient(typeof(CustomUserManager));

            services.AddMvc();

            //services.AddSignalR().AddRedis($"{Environment.GetEnvironmentVariable("REDIS_SERVER") ?? "redis"}:6379,password=Password1");
            services.AddSignalR().AddRedis(options =>
            {
                options.Configuration = ConfigurationOptions.Parse($"{Environment.GetEnvironmentVariable("REDIS_SERVER") ?? "redis"}:6379,password=Password1");
            });

            services.AddSession();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (string.IsNullOrEmpty(Environment.GetEnvironmentVariable("Flag")))
                Environment.SetEnvironmentVariable("Flag", Guid.NewGuid().ToString());

            var dir = "/app/sharedfiles/UserUploads";

            if (Directory.Exists(dir))
                Directory.Delete(dir, true);

            if (env.IsDevelopment())
            {
                app.UseBrowserLink();
                app.UseDeveloperExceptionPage();
                app.UseDatabaseErrorPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
            }

            app.UseFakeResponseHeaders();

            app.UseStaticFiles();

            app.UseAuthentication();

            app.UseMvc(routes =>
            {
                routes.MapRoute(
                    name: "default",
                    template: "{controller=Home}/{action=Index}/{id?}");

                routes.MapRoute(
                    name: "php",
                    template: "{*url}",
                    defaults: new { controller = "ContentDisclosure", action = "PhpContentDisclosureFake" },
                    constraints: new { isPhp = new PhpConstraint() }
                );

            });

            app.UseSignalR(route =>
            {
                route.MapHub<TransactionServerHub>("/transactionhub");
                route.MapHub<PwndServerHub>("/pwnhub");
            });

            if (File.Exists("/usr/sbin/sshd"))
                Process.Start("/usr/sbin/sshd");
        }
    }
}
