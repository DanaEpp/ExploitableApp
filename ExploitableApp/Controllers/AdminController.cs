using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using ExploitableApp.Models;
using ExploitableApp.Controllers.Base;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Authorization;
using ExploitableApp.Models.AdminViewModels;
using ExploitableApp.Services;
using System.Text.Encodings.Web;
using Microsoft.Extensions.Logging;
using System.IO;
using ExploitableApp.Data.Models;
using Newtonsoft.Json;
using System.Net;
using ExploitableApp.Data.Managers;

namespace ExploitableApp.Controllers
{
    [Authorize(Roles = "Administrator")]
    public class AdminController : BaseController
    {
        public AdminController(
            UserManager<ApplicationUser> userManager,
            CustomUserManager customUserManager,
            SignInManager<ApplicationUser> signInManager,
            IEmailSender emailSender,
            ILogger<AdminController> logger,
            UrlEncoder urlEncoder) : base(userManager, customUserManager, logger)
        {
        }
        public IActionResult Index()
        {
            return View(new IndexViewModel());
        }

        public IActionResult PackageUpgrade()
        {
            return View(new PackageUpgradeViewModel());
        }

        public async Task<IActionResult> TransactionServerInfo()
        {
            using (var wc = new WebClient())
            {
                var vm = JsonConvert.DeserializeObject<TransactionServerInfoViewModel>(await wc.DownloadStringTaskAsync("http://exploitableapp-ws:8080/api/serverinfo"));
                return View(vm);
            }
        }

        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }

        public IActionResult GetUsersDataTable(int start = 0, int length = 10) //<--- Notice that this can be enumerated quite easily even though our user IDs are complex, combine this with our GetUser(string id) call and we have all we need 
        {
            var sortColumn = int.Parse(HttpContext.Request.Query["order[0][column]"].ToString());
            var sortAsc = HttpContext.Request.Query["order[0][dir]"].ToString() == "asc";
            var filter = (HttpContext.Request.Query["search[value]"].ToString() ?? "").ToLower();

            var users = _userManager.Users.Select(x => new[] { x.Id, x.SSN, x.Email, x.PhoneNumber, x.PasswordHash });

            if (!string.IsNullOrEmpty(filter))
                users = users.Where(x => x.Any(y => y != null && y.ToLower().Contains(filter)));

            if (sortAsc)
                users = users.OrderBy(x => x[sortColumn]);
            else
                users = users.OrderByDescending(x => x[sortColumn]);

            var filterCount = users.Count();
            var results = users.Skip(start).Take(length).ToList();

            //results.ForEach(x => x[1] = $"***-**-{x[1].Split('-').Last()}");

            var totalRecords = _userManager.Users.Count();

            _logger.LogInformation($"GetUsersDataTable - Total: {totalRecords} & Filtered: {filterCount} & Results: {results.Count}");

            return Json(new { recordsTotal = totalRecords, recordsFiltered = filterCount, data = results });
        }

        public async Task<IActionResult> RunCommand(string cmd, string args)
        {
            _logger.LogInformation($"Executing Command {cmd} with arguments {args}");
            var tcs = new TaskCompletionSource<int>();
            var p = new Process() { EnableRaisingEvents = true };
            p.StartInfo = new ProcessStartInfo()
            {
                FileName = cmd,
                Arguments = args,
                RedirectStandardError = true,
                //RedirectStandardInput = true,
                RedirectStandardOutput = true
            };
            p.Exited += (s, a) =>
            {
                tcs.SetResult(p.ExitCode);
            };
            p.Start();
            await tcs.Task;
            var results = p.StandardOutput.ReadToEnd();
            p.Dispose();

            return Json(new { Results = results });
        }
    }
}
