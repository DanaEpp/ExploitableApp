using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using ExploitableApp.Models;
using ExploitableApp.Controllers.Base;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Authorization;

namespace ExploitableApp.Controllers
{
    [Authorize(Roles = "Administrator")]
    public class AdminController : BaseController
    {
        public AdminController(UserManager<ApplicationUser> userManager) : base(userManager) { }
        public IActionResult Index()
        {
            return View();
        }

        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }

        public IActionResult GetUsersDataTable(int start = 0, int length = 10) //<--- Notice that this can be enumerated quite easily even though our user IDs are complex, combine this with our GetUser(string id) call and we have all we need 
        {
            var sortColumn = int.Parse(HttpContext.Request.Query["order[0][column]"].ToString());
            var sortAsc = HttpContext.Request.Query["order[0][dir]"].ToString() == "asc";
            var filter = (HttpContext.Request.Query["search[value]"].ToString() ?? "").ToLower();

            var users = _userManager.Users.Select(x => new[] { x.Id, x.SSN, x.Email, x.PhoneNumber, x.PasswordHash });

            if (!string.IsNullOrEmpty(filter))
                users = users.Where(x => x.Any(y => y != null && y.ToLower().Contains(filter)));

            if (sortAsc)
                users = users.OrderBy(x => x[sortColumn]);
            else
                users = users.OrderByDescending(x => x[sortColumn]);

            var filterCount = users.Count();
            var results = users.Skip(start).Take(length).ToList();

            //results.ForEach(x => x[1] = $"***-**-{x[1].Split('-').Last()}");

            return Json(new { recordsTotal = _userManager.Users.Count(), recordsFiltered = filterCount, data = results });
        }
    }
}
