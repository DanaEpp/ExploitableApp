using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using ExploitableApp.Models;
using ExploitableApp.Controllers.Base;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Authorization;
using ExploitableApp.Models.BankingViewModels;
using ExploitableApp.Services;
using System.Text.Encodings.Web;
using Microsoft.Extensions.Logging;
using System.IO;
using ExploitableApp.Managers;

namespace ExploitableApp.Controllers
{
    [Authorize]
	public class BankingController : BaseController
    {
        private BankingAccountManager _BankingAccountManager;

        public BankingController(
            UserManager<ApplicationUser> userManager,
            SignInManager<ApplicationUser> signInManager,
            BankingAccountManager BankingAccountManager,
            IEmailSender emailSender,
            ILogger<ManageController> logger,
            UrlEncoder urlEncoder) : base(userManager) {
            _BankingAccountManager = BankingAccountManager;
        }
        public async Task<IActionResult> Index()
        {
            var accounts = _BankingAccountManager.GetAccounts(await _userManager.GetUserAsync(HttpContext.User));
            return View(new IndexViewModel()
            {
                Balance = accounts.Sum(x => x.Balance)
            });
        }

        public async Task<IActionResult> GetTransactionDataTable(string id, int start = 0, int length = 10) //<--- Notice that this can be enumerated quite easily even though our user IDs are complex, combine this with our GetUser(string id) call and we have all we need 
        {
            var sortColumn = int.Parse(HttpContext.Request.Query["order[0][column]"].ToString());
            var sortAsc = HttpContext.Request.Query["order[0][dir]"].ToString() == "asc";
            var filter = (HttpContext.Request.Query["search[value]"].ToString() ?? "").ToLower();

            var user = await _userManager.FindByIdAsync(id);

            if (user == null)
                return NotFound();

            var account = _BankingAccountManager.GetAccounts(user).FirstOrDefault();

            if (account == null)
                return NotFound();

            var allAccountTransactions = _BankingAccountManager.GetTransactions(account);
            var transactions = allAccountTransactions.Select(x=> new[]{ x.ID, x.Description, x.Status, x.Amount.ToString("#,##0.00"), x.From.AccountOwner.UserName, x.To.AccountOwner.UserName });

            if (!string.IsNullOrEmpty(filter))
                transactions = transactions.Where(x => x.Any(y => y != null && y.ToLower().Contains(filter)));

            if (sortAsc)
                transactions = transactions.OrderBy(x => x[sortColumn]);
            else
                transactions = transactions.OrderByDescending(x => x[sortColumn]);

            var filterCount = transactions.Count();
            var results = transactions.Skip(start).Take(length).ToList();

            return Json(new { recordsTotal = allAccountTransactions.Count(), recordsFiltered = filterCount, data = results });
        }
    }
}
