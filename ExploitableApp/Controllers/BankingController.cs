using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using ExploitableApp.Data.Models;
using ExploitableApp.Controllers.Base;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Authorization;
using ExploitableApp.Models.BankingViewModels;
using ExploitableApp.Services;
using System.Text.Encodings.Web;
using Microsoft.Extensions.Logging;
using System.IO;
using ExploitableApp.Data.Managers;

namespace ExploitableApp.Controllers
{
    [Authorize]
    public class BankingController : BaseController
    {
        private BankingAccountManager _BankingAccountManager;

        public BankingController(
            UserManager<ApplicationUser> userManager,
            SignInManager<ApplicationUser> signInManager,
            BankingAccountManager bankingAccountManager,
            IEmailSender emailSender,
            ILogger<ManageController> logger,
            UrlEncoder urlEncoder) : base(userManager)
        {
            _BankingAccountManager = bankingAccountManager;
        }
        public async Task<IActionResult> Index()
        {
            var usr = await _userManager.GetUserAsync(HttpContext.User);
            if (usr == null)
                return Redirect("~/account/accessdenied");
            var accounts = _BankingAccountManager.GetAccounts(usr);
            return View(new IndexViewModel()
            {
                Balance = accounts.Sum(x => x.Balance)
            });
        }

        public async Task<IActionResult> Transfer()
        {
            var usr = await _userManager.GetUserAsync(HttpContext.User);
            if (usr == null)
                return Redirect("~/account/accessdenied");
            var accounts = _BankingAccountManager.GetAccounts(usr);
            return View(new TransferViewModel()
            {
                Balance = accounts?.FirstOrDefault()?.Balance ?? 0,
                FromID = usr.Id,
            });
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Transfer(TransferViewModel model)
        {
            var from = await _userManager.FindByIdAsync(model.FromID);
            var to = await _userManager.FindByIdAsync(model.ToID);
            if (from == null || to == null)
                return RedirectToAction("Index");

            var fromAccount = _BankingAccountManager.GetAccounts(from).FirstOrDefault();
            var toAccount = _BankingAccountManager.GetAccounts(to).FirstOrDefault();

            _BankingAccountManager.CreateTransaction(fromAccount, toAccount, model.Amount, model.Description, DateTime.Now);

            return RedirectToAction("Index");
        }

        public async Task<IActionResult> GetTransactionDataTable(string id, int start = 0, int length = 10) //<--- Notice that this can be enumerated quite easily even though our user IDs are complex, combine this with our GetUser(string id) call and we have all we need 
        {
            var sortColumn = int.Parse(HttpContext.Request.Query["order[0][column]"].ToString());
            var sortAsc = HttpContext.Request.Query["order[0][dir]"].ToString() == "asc";
            var filter = (HttpContext.Request.Query["search[value]"].ToString() ?? "").ToLower();

            var user = await _userManager.FindByIdAsync(id);

            if (user == null)
                return NotFound();

            var account = _BankingAccountManager.GetAccounts(user).FirstOrDefault();

            if (account == null)
                return NotFound();

            var allAccountTransactions = _BankingAccountManager.GetTransactions(account);
            var transactions = allAccountTransactions.Select(x => new[] { x.Time.ToString(), x.Description, x.Status, x.Amount.ToString("#,##0.00"), x.From.AccountOwner.UserName, x.To.AccountOwner.UserName, x.ID });

            if (!string.IsNullOrEmpty(filter))
                transactions = transactions.Where(x => x.Any(y => y != null && y.ToLower().Contains(filter)));

            if (sortAsc)
                transactions = transactions.OrderBy(x => x[sortColumn]);
            else
                transactions = transactions.OrderByDescending(x => x[sortColumn]);

            var filterCount = transactions.Count();
            var results = transactions.Skip(start).Take(length).ToList().Select(x => new[] { x[0], x[1], x[2], x[4] == user.UserName ? $"({x[3]})" : x[3], x[4], x[5], x[6] });

            return Json(new { recordsTotal = allAccountTransactions.Count(), recordsFiltered = filterCount, data = results });
        }

        [HttpGet]
        public IActionResult CompleteTransaction(string appSecret, string transactionID)
        {
            try
            {
                var t = _BankingAccountManager.GetTransaction(transactionID);
                if (t != null)
                {
                    _BankingAccountManager.CompleteTransaction(t);
                    return Json(new { Result = "Success" });
                }
            }
            catch { }
            return Json(new { Result = "Failure" });
        }
    }
}
